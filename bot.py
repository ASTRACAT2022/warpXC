import sqlite3
import os
import logging
import asyncio
import threading
import uuid
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from flask import Flask, render_template_string
import pandas as pd
from asciichartpy import plot
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "7935425343:AAECbjFJvLHkeTvwHAKDG8uvmy-KiWcPtns"
ADMIN_TELEGRAM_ID = 650154766
PORT = os.getenv("PORT", "5000")
RENDER_EXTERNAL_HOSTNAME = "warpxc.onrender.com"

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN={'***' if BOT_TOKEN else '–Ω–µ –∑–∞–¥–∞–Ω'}, "
            f"ADMIN_TELEGRAM_ID={ADMIN_TELEGRAM_ID}, "
            f"PORT={PORT}, RENDER_EXTERNAL_HOSTNAME={RENDER_EXTERNAL_HOSTNAME}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram Application

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
DB_PATH = ":memory:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å Telegram API
async def check_telegram_api():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getMe") as response:
                data = await response.json()
                if data.get("ok"):
                    logger.info("–°–≤—è–∑—å —Å Telegram API –∞–∫—Ç–∏–≤–Ω–∞")
                    return True, "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {data}")
                    return False, f"üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')})"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API: {e}")
        return False, f"üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({str(e)})"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''CREATE TABLE users (
            telegram_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            first_seen DATETIME,
            last_config_time TEXT,
            is_banned INTEGER DEFAULT 0
        )''')
        c.execute('''CREATE TABLE configs (
            config_id TEXT PRIMARY KEY,
            telegram_id INTEGER,
            created_at DATETIME,
            is_active INTEGER DEFAULT 1,
            FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
        )''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø–∞–º—è—Ç–∏")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i in range(10):
            telegram_id = 12345 + i
            c.execute(
                "INSERT OR IGNORE INTO users (telegram_id, username, first_name, first_seen, is_banned) "
                "VALUES (?, ?, ?, ?, ?)",
                (telegram_id, f"test_user_{i}", f"User{i}", datetime.now() - timedelta(hours=i), 0)
            )
            c.execute(
                "INSERT INTO configs (config_id, telegram_id, created_at, is_active) "
                "VALUES (?, ?, ?, ?)",
                (str(uuid.uuid4()), telegram_id, datetime.now() - timedelta(hours=i), 1)
            )
        conn.commit()
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        if conn:
            conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def generate_warp_config():
    private_key = f"CS/UQwV5cCjhGdH/1FQbSkRLvYU8Ha1xeTkHVg5rizI={uuid.uuid4().hex[:8]}"
    public_key = "bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo="
    config = f"""[Interface]
PrivateKey = {private_key}
S1 = 0
S2 = 0
Jc = 120
Jmin = 23
Jmax = 911
H1 = 1
H2 = 2
H Nau3 = 3
H4 = 4
MTU = 1280
Address = 172.16.0.2, 2606:4700:110:8a82:ae4c:ce7e:e5a6:a7fd
DNS = 1.1.1.1, 2606:4700:4700::1111, 1.0.0.1, 2606:4700:4700::1001

[Peer]
PublicKey = {public_key}
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = 162.159.192.227:894
"""
    return config

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
def is_admin(telegram_id):
    return telegram_id == ADMIN_TELEGRAM_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats():
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE is_banned = 0")
        active_users = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
        banned_users = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM configs WHERE is_active = 1")
        active_configs = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM configs")
        total_configs = c.fetchone()[0]
        return active_users, banned_users, active_configs, total_configs
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return 0, 0, 0, 0
    finally:
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def get_activity_by_range(range_type):
    try:
        conn = sqlite3.connect(DB_PATH)
        query = """
            SELECT strftime('%H', first_seen) as hour, COUNT(*) as activity_count
            FROM users
            WHERE first_seen >= ?
            GROUP BY hour
            ORDER BY hour
        """
        if range_type == "day":
            start_time = datetime.now() - timedelta(days=1)
        elif range_type == "week":
            start_time = datetime.now() - timedelta(days=7)
        elif range_type == "month":
            start_time = datetime.now() - timedelta(days=30)
        else:
            start_time = datetime.now() - timedelta(days=1)
        df = pd.read_sql_query(query, conn, params=(start_time,))
        return df
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–≥—Ä–∞—Ñ–∏–∫–∞
def generate_ascii_chart(range_type):
    df = get_activity_by_range(range_type)
    if df.empty:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ({range_type})")
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"

    activity_counts = [0] * 24
    for _, row in df.iterrows():
        hour = int(row['hour'])
        activity_counts[hour] = row['activity_count']

    chart = plot(activity_counts, {'height': 10, 'format': '{:8.0f}'})
    return f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({range_type}):\n{chart}"

# Flask: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
async def stats_page():
    logger.info("–ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    active_users, banned_users, active_configs, total_configs = get_stats()
    ascii_chart_day = generate_ascii_chart("day")
    api_status_ok, api_status_message = await check_telegram_api()
    return render_template_string(
        """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WARP Bot Dashboard</title>
            <script src="https://cdn.tailwindcss.com"></script>
        </head>
        <body class="bg-gray-900 text-gray-100">
            <nav class="bg-gray-800 p-4 shadow">
                <div class="container mx-auto flex justify-between items-center">
                    <h1 class="text-2xl font-bold">WARP Bot Dashboard</h1>
                    <div>
                        <a href="/" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/activity/day" class="text-gray-300 hover:text-white px-3 py-2 rounded">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </nav>
            <div class="container mx-auto p-6">
                <h2 class="text-3xl font-semibold mb-6">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <div class="bg-gray-800 p-4 rounded-lg mb-6">
                    <p class="text-lg font-medium">
                        –°—Ç–∞—Ç—É—Å Telegram API: 
                        <span class="{% if api_status_ok %}text-green-400{% else %}text-red-400{% endif %} font-bold">
                            {{ api_status_message }}
                        </span>
                    </p>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <div class="bg-gray-800 p-6 rounded-lg shadow">
                        <h3 class="text-lg font-medium text-gray-300">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <p class="text-2xl font-bold text-blue-400">{{ active_users }}</p>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow">
                        <h3 class="text-lg font-medium text-gray-300">–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <p class="text-2xl font-bold text-red-400">{{ banned_users }}</p>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow">
                        <h3 class="text-lg font-medium text-gray-300">–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
                        <p class="text-2xl font-bold text-green-400">{{ active_configs }}</p>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow">
                        <h3 class="text-lg font-medium text-gray-300">–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</h3>
                        <p class="text-2xl font-bold text-purple-400">{{ total_configs }}</p>
                    </div>
                </div>
                <h2 class="text-3xl font-semibold mb-6">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                <div class="bg-gray-800 p-6 rounded-lg shadow">
                    <h3 class="text-xl font-medium mb-4">–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (24 —á–∞—Å–∞)</h3>
                    <pre class="font-mono text-sm bg-gray-900 p-4 rounded">{{ ascii_chart_day }}</pre>
                    <div class="mt-4 flex space-x-4">
                        <a href="/activity/day" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """,
        active_users=active_users,
        banned_users=banned_users,
        active_configs=active_configs,
        total_configs=total_configs,
        ascii_chart_day=ascii_chart_day,
        api_status_ok=api_status_ok,
        api_status_message=api_status_message
    )

# Flask: –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@app.route('/activity/<range_type>')
async def activity_plot(range_type):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –≥—Ä–∞—Ñ–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({range_type})")
    if range_type not in ["day", "week", "month"]:
        return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω", 400
    ascii_chart = generate_ascii_chart(range_type)
    api_status_ok, api_status_message = await check_telegram_api()
    return render_template_string(
        """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WARP Bot Activity</title>
            <script src="https://cdn.tailwindcss.com"></script>
        </head>
        <body class="bg-gray-900 text-gray-100">
            <nav class="bg-gray-800 p-4 shadow">
                <div class="container mx-auto flex justify-between items-center">
                    <h1 class="text-2xl font-bold">WARP Bot Dashboard</h1>
                    <div>
                        <a href="/" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/activity/day" class="text-gray-300 hover:text-white px-3 py-2 rounded">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </nav>
            <div class="container mx-auto p-6">
                <h2 class="text-3xl font-semibold mb-6">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({{ range_type }})</h2>
                <div class="bg-gray-800 p-4 rounded-lg mb-6">
                    <p class="text-lg font-medium">
                        –°—Ç–∞—Ç—É—Å Telegram API: 
                        <span class="{% if api_status_ok %}text-green-400{% else %}text-red-400{% endif %} font-bold">
                            {{ api_status_message }}
                        </span>
                    </p>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow">
                    <pre class="font-mono text-sm bg-gray-900 p-4 rounded">{{ ascii_chart }}</pre>
                    <div class="mt-4 flex space-x-4">
                        <a href="/activity/day" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """,
        range_type=range_type,
        ascii_chart=ascii_chart,
        api_status_ok=api_status_ok,
        api_status_message=api_status_message
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
def get_main_keyboard(is_admin_user=False):
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config"),
            InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
        ],
        [
            InlineKeyboardButton("XrayVPN", url="https://astracat2022.github.io/vpngen/generator"),
        ]
    ]
    if is_admin_user:
        keyboard.append([
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users"),
        ])
        keyboard.append([
            InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24—á)", callback_data="activity_day"),
            InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ–¥–µ–ª—è)", callback_data="activity_week"),
        ])
        keyboard.append([
            InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü)", callback_data="activity_month"),
        ])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            "INSERT OR REPLACE INTO users (telegram_id, username, first_name, last_name, first_seen, is_banned) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (user.id, user.username, user.first_name, user.last_name, datetime.now(), 0)
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

    is_admin_user = is_admin(user.id)
    reply_markup = get_main_keyboard(is_admin_user)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n"
        f"ID: {user.id}\n"
        "–ë–æ—Ç –¥–ª—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    is_admin_user = is_admin(user.id)
    reply_markup = get_main_keyboard(is_admin_user)
    await query.answer()

    if query.data == "get_config":
        await get_config(update, context)
    elif query.data == "help":
        help_text = (
            "–ë–æ—Ç –¥–ª—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å\n"
            "/getconfig - –ü–æ–ª—É—á–∏—Ç—å WARP –∫–æ–Ω—Ñ–∏–≥\n"
            "–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/users - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            "/ban <id> - –ó–∞–±–∞–Ω–∏—Ç—å\n"
            "/unban <id> - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
            "/broadcast <—Ç–µ–∫—Å—Ç> - –†–∞—Å—Å—ã–ª–∫–∞\n"
            "/hourly_activity - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        )
        await query.message.reply_text(help_text, reply_markup=reply_markup)
    elif query.data == "stats" and is_admin_user:
        await stats(update, context)
    elif query.data == "users" and is_admin_user:
        await users(update, context)
    elif query.data in ["activity_day", "activity_week", "activity_month"] and is_admin_user:
        range_type = {"activity_day": "day", "activity_week": "week", "activity_month": "month"}[query.data]
        ascii_chart = generate_ascii_chart(range_type)
        await query.message.reply_text(
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({range_type}):\n```\n{ascii_chart}\n```",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /getconfig
async def get_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute("SELECT is_banned, last_config_time FROM users WHERE telegram_id = ?", (user.id,))
    result = c.fetchone()
    if result and result[0] == 1:
        await update.message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã", reply_markup=get_main_keyboard())
        conn.close()
        return

    if result and result[1]:
        last_time = datetime.fromisoformat(result[1])
        if datetime.now() - last_time < timedelta(hours=24):
            await update.message.reply_text(
                "–ö–æ–Ω—Ñ–∏–≥ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞",
                reply_markup=get_main_keyboard()
            )
            conn.close()
            return

    config = generate_warp_config()
    config_id = str(uuid.uuid4())
    c.execute(
        "INSERT INTO configs (config_id, telegram_id, created_at, is_active) VALUES (?, ?, ?, ?)",
        (config_id, user.id, datetime.now(), 1)
    )
    c.execute(
        "UPDATE users SET last_config_time = ? WHERE telegram_id = ?",
        (datetime.now().isoformat(), user.id)
    )
    conn.commit()
    conn.close()

    config_path = f"/tmp/config_{user.id}.conf"
    with open(config_path, "w") as f:
        f.write(config)
    try:
        with open(config_path, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename="warp.conf",
                caption="–í–∞—à–∞ WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                reply_markup=get_main_keyboard(is_admin(user.id))
            )
    finally:
        if os.path.exists(config_path):
            os.remove(config_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    active_users, banned_users, active_configs, total_configs = get_stats()
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ: {banned_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏: {active_configs}\n"
        f"–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {total_configs}"
    )
    await update.message.reply_text(stats_message, reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /users
async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT telegram_id, username, first_name, is_banned FROM users")
    users = c.fetchall()
    conn.close()
    users_message = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users:
        status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if user[3] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        users_message += f"ID: {user[0]}\nUsername: {user[1] or 'N/A'}\n–ò–º—è: {user[2]}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
    await update.message.reply_text(users_message, reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /ban
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID: /ban <telegram_id>")
        return
    try:
        target_id = int(context.args[0])
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("UPDATE users SET is_banned = 1 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω", reply_markup=get_main_keyboard(is_admin=True))
        try:
            await context.bot.send_message(chat_id=target_id, text="–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å ID {target_id}: {e}")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID", reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /unban
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID: /unban <telegram_id>")
        return
    try:
        target_id = int(context.args[0])
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("UPDATE users SET is_banned = 0 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω", reply_markup=get_main_keyboard(is_admin=True))
        try:
            await context.bot.send_message(chat_id=target_id, text="–í—ã —Ä–∞–∑–±–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å ID {target_id}: {e}")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID", reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /broadcast
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    message = " ".join(context.args)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT telegram_id FROM users WHERE is_banned = 0")
    users = c.fetchall()
    conn.close()
    success_count = 0
    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=message)
            success_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {user[0]}: {e}")
    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        reply_markup=get_main_keyboard(is_admin=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /hourly_activity
async def hourly_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    ascii_chart = generate_ascii_chart("day")
    await update.message.reply_text(
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24 —á–∞—Å–∞):\n```\n{ascii_chart}\n```",
        reply_markup=get_main_keyboard(is_admin=True),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    global application
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Application")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("getconfig", get_config))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("users", users))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("unban", unban))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("hourly_activity", hourly_activity))
    application.add_error_handler(error_handler)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    logger.info("–ó–∞–ø—É—Å–∫ polling")
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        await application.initialize()
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("Polling –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
        raise

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    init_db()

    try:
        bot_thread = threading.Thread(target=lambda: asyncio.run(run_bot()))
        bot_thread.daemon = True
        bot_thread.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

    app.run(host='0.0.0.0', port=int(PORT))

if __name__ == "__main__":
    main()
