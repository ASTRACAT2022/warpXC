import sqlite3
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from datetime import datetime, timedelta
import uuid
import os
from dotenv import load_dotenv
import matplotlib.pyplot as plt
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")

if not BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
if not ADMIN_TELEGRAM_ID:
    raise ValueError("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_TELEGRAM_ID –Ω–µ –∑–∞–¥–∞–Ω–∞.")

try:
    ADMIN_TELEGRAM_ID = int(ADMIN_TELEGRAM_ID)
except ValueError:
    raise ValueError("–û—à–∏–±–∫–∞: ADMIN_TELEGRAM_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        last_config_time TEXT,
        is_banned INTEGER DEFAULT 0
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS configs (
        config_id TEXT PRIMARY KEY,
        telegram_id INTEGER,
        created_at TEXT,
        is_active INTEGER DEFAULT 1,
        FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
    )''')
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def generate_warp_config():
    private_key = f"CS/UQwV5cCjhGdH/1FQbSkRLvYU8Ha1xeTkHVg5rizI={uuid.uuid4().hex[:8]}"
    public_key = "bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo="
    config = f"""[Interface]
PrivateKey = {private_key}
S1 = 0
S2 = 0
Jc = 120
Jmin = 23
Jmax = 911
H1 = 1
H2 = 2
H3 = 3
H4 = 4
MTU = 1280
Address = 172.16.0.2, 2606:4700:110:8a82:ae4c:ce7e:e5a6:a7fd
DNS = 1.1.1.1, 2606:4700:4700::1111, 1.0.0.1, 2606:4700:4700::1001

[Peer]
PublicKey = {public_key}
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = 162.159.192.227:894
"""
    return config

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(telegram_id):
    return telegram_id == ADMIN_TELEGRAM_ID

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_user_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config")],
        [InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute(
        "INSERT OR REPLACE INTO users (telegram_id, username, first_name, last_name, last_config_time, is_banned) VALUES (?, ?, ?, ?, ?, ?)",
        (user.id, user.username, user.first_name, user.last_name, None, 0)
    )
    conn.commit()
    conn.close()
    
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
        "–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã: /stats, /users, /ban, /unban, /broadcast"
    )
    await update.message.reply_text(welcome_message, reply_markup=get_user_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getconfig –∏ –∫–Ω–æ–ø–∫–∏
async def get_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update, 'callback_query'):
        user = update.callback_query.from_user
        message = update.callback_query.message
    else:
        user = update.effective_user
        message = update.message

    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    c.execute("SELECT is_banned FROM users WHERE telegram_id = ?", (user.id,))
    result = c.fetchone()
    if result and result[0] == 1:
        await message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ª–∏–º–∏—Ç 1 –∫–æ–Ω—Ñ–∏–≥ –≤ 24 —á–∞—Å–∞)
    c.execute("SELECT last_config_time FROM users WHERE telegram_id = ?", (user.id,))
    last_config_time = c.fetchone()[0]
    if last_config_time:
        last_time = datetime.fromisoformat(last_config_time)
        if datetime.now() - last_time < timedelta(hours=24):
            await message.reply_text(
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            conn.close()
            return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = generate_warp_config()
    config_id = str(uuid.uuid4())
    c.execute(
        "INSERT INTO configs (config_id, telegram_id, created_at, is_active) VALUES (?, ?, ?, ?)",
        (config_id, user.id, datetime.now().isoformat(), 1)
    )
    c.execute(
        "UPDATE users SET last_config_time = ? WHERE telegram_id = ?",
        (datetime.now().isoformat(), user.id)
    )
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open(f"config_{user.id}.conf", "w") as f:
        f.write(config)
    with open(f"config_{user.id}.conf", "rb") as f:
        await message.reply_document(document=f, filename="warp.conf")
    os.remove(f"config_{user.id}.conf")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_config":
        await get_config(query, context)
    elif query.data == "help":
        help_message = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n"
            "- –ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getconfig –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
            "- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–¥–∞—é—Ç—Å—è —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.\n"
            "- –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã: /stats, /users, /ban, /unban, /broadcast."
        )
        await query.message.reply_text(help_message, reply_markup=get_user_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async def stats(update: Update, context: ContextTypes):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
    banned_users = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM configs WHERE is_active = 1")
    active_configs = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM configs")
    total_configs = c.fetchone()[0]
    
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {banned_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {active_configs}\n"
        f"–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {total_configs}"
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤—Å–µ–≥–æ –∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ)
    plt.figure(figsize=(8, 6))
    labels = ['–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ']
    values = [total_users, banned_users]
    plt.bar(labels, values, color=['blue', 'red'])
    plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    plt.grid(True, axis='y')
    plt.savefig('users_stats.png')
    plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—Å–µ–≥–æ)
    plt.figure(figsize=(8, 6))
    labels = ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏', '–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤']
    values = [active_configs, total_configs]
    plt.bar(labels, values, color=['green', 'purple'])
    plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    plt.grid(True, axis='y')
    plt.savefig('configs_stats.png')
    plt.close()
    
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    await update.message.reply_text(stats_message)
    with open('users_stats.png', 'rb') as f:
        await update.message.reply_photo(photo=f, caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    with open('configs_stats.png', 'rb') as f:
        await update.message.reply_photo(photo=f, caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.remove('users_stats.png')
    os.remove('configs_stats.png')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async def users(update: Update, context: ContextTypes):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    c.execute("SELECT telegram_id, username, first_name, last_name, is_banned FROM users")
    users = c.fetchall()
    conn.close()
    
    users_message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if user[4] == 1 else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        users_message += (
            f"ID: {user[0]}\n"
            f"Username: {user[1] or 'N/A'}\n"
            f"–ò–º—è: {user[2]} {user[3] or ''}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    await update.message.reply_text(users_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async def ban(update: Update, context: ContextTypes):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban <telegram_id>")
        return
    
    try:
        target_id = int(context.args[0])
        conn = sqlite3.connect("warp_bot.db")
        c = conn.cursor()
        c.execute("UPDATE users SET is_banned = 1 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()
        bot = context.bot
        await bot.send_message(chat_id=target_id, text="–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async def unban(update: Update, context: ContextTypes):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban <telegram_id>")
        return
    
    try:
        target_id = int(context.args[0])
        conn = sqlite3.connect("warp_bot.db")
        c = conn.cursor()
        c.execute("UPDATE users SET is_banned = 0 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()
        bot = context.bot
        await bot.send_message(chat_id=target_id, text="–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast (–¥–ª—è –∞–¥–º–∏–Ω–∞)
–∞—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–µ—Ñ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç: ContextTypes):
    –µ—Å–ª–∏ –Ω–µ is_admin(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä):
        –∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.—Å–æ–æ–±—â–µ–Ω–∏–µ.–æ—Ç–≤–µ—Ç–∏—Ç—å_text("–≠—Ç–∞ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –≤ —Å–µ–±—è –∏ —Å—Ç–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º".)
        –≤–æ–∑–≤—Ä–∞—Ç
    
    –µ—Å–ª–∏ –Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç.–∞—Ä–≥—Å:
        –∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.—Å–æ–æ–±—â–µ–Ω–∏–µ.–æ—Ç–≤–µ—Ç–∏—Ç—å_text("–£–∫–∞–∂–∏—Ç—Å–∫–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞ dllia ratsyclki: /–≤–µ—â–∞–Ω–∏–µ <soboni–µni–µ>")
        –≤–æ–∑–≤—Ä–∞—Ç
    
 —Å–æ–æ–±—â–µ–Ω–∏–µ = "".–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è(–∫–æ–Ω—Ç–µ–∫—Å—Ç.–∞—Ä–≥—Å)
 conn = sqlite3.–ø–æ–¥–∫–ª—é—á–∏—Ç—å("warp_bot.db")
 c = –∫–æ–Ω–Ω.–∫—É—Ä—Å–æ—Ä()
 —Å.–≤—ã–ø–æ–ª–Ω–∏—Ç—å("–í–´–ë–ï–†–ò–¢–ï telegram_id –û–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ì–î–ï_–∑–∞–ø—Ä–µ—â–µ–Ω–æ = 0")
 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ = c.—Ñ–µ—Ç—á–µ–ª–ª()
 –∫–æ–Ω–Ω.–∑–∞–∫—Ä—ã–≤–∞—Ç—å()
    
    –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
        –ø–æ–ø—Ä–æ–±—É–π:
            –∂–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.–±–æ—Ç.–æ—Ç–ø—Ä–∞–≤–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ(—á–∞—Ç_id=user[0], text=message)
        –∫—Ä–æ–º–µ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ —ç:
 –ª–µ—Å–æ—Ä—É–±.–æ—à–∏–±–∫–∞(f "–û—à–∏–±–∫–∞" –ø–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[0]}: {e}")
    
    –∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.—Å–æ–æ–±—â–µ–Ω–∏–µ.–æ—Ç–≤–µ—Ç–∏—Ç—å_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞".)

#–û–±—Ä–∞–±–æ—Ç–∏–∫ –æ—à–∏–±–æ–∫
–∞—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–µ—Ñ –æ—à–∏–±–∫–∞_handler(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç: ContextTypes):
 –ª–µ—Å–æ—Ä—É–±.–æ—à–∏–±–∫–∞(f"–û–±–Ω–æ–≤–∏—Ç—å {–æ–±–Ω–æ–≤–ª—è—Ç—å} –ø—Ä–∏—á–∏–Ω–æ–π –æ—à–∏–±–∫–∏ {–∫–æ–Ω—Ç–µ–∫—Å—Ç.–æ—à–∏–±–∫–∞}")

–¥–µ—Ñ –æ—Å–Ω–æ–≤–Ω–æ–π():
    init_db()
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ = –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.—Å—Ç—Ä–æ–∏—Ç–µ–ª—å().–∂–µ—Ç–æ–Ω(–ë–û–¢_–¢–û–ö–ï–ù).—Å—Ç—Ä–æ–∏—Ç—å()
    
    #–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("—Å—Ç–∞—Ä—Ç", –Ω–∞—á–∏–Ω–∞–π))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("getconfig", get_config))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("—Å—Ç–∞—Ç—Å", —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("–±–∞–Ω", –∑–∞–ø—Ä–µ—Ç–∏—Ç—å))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("—É–Ω–±–∞–Ω", —Ä–∞–∑–±–∞–Ω))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µHandler("—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è", —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è))
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_handler(–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤QueryHandler(–∫–Ω–æ–ø–∫–∞_–æ—Ö–æ—Ç–Ω–∏–∫))
    
    #–û–±—Ä–∞–±–æ—Ç–∏–∫ –æ—à–∏–±–æ–∫
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–¥–æ–±–∞–≤–∏—Ç—å_–æ—à–∏–±–∫–∞_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫(–æ—à–∏–±–∫–∞_handler)
    
    #–ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞
 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–∑–∞–ø—É—Å—Ç–∏—Ç—å_–æ–ø—Ä–æ—Å(—Ä–∞–∑—Ä–µ—à–µ–Ω–æ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è=–û–±–Ω–æ–≤–∏—Ç—å.–í–°–ï_–¢–ò–ü–´)

–µ—Å–ª–∏ __name__ == "__main__":
    –æ—Å–Ω–æ–≤–Ω–æ–π()
