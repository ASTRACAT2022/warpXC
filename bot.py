import sqlite3
import os
import logging
import asyncio
import uuid
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.error import Conflict, NetworkError, TelegramError
from datetime import datetime, timedelta
import pandas as pd
from flask import Flask, render_template_string, request
from asciichartpy import plot
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
PORT = os.getenv("PORT", "5000")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME", "warpxc.onrender.com")

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN={'***' if BOT_TOKEN else '–Ω–µ –∑–∞–¥–∞–Ω'}, "
            f"ADMIN_TELEGRAM_ID={ADMIN_TELEGRAM_ID or '–Ω–µ –∑–∞–¥–∞–Ω'}, "
            f"PORT={PORT}, RENDER_EXTERNAL_HOSTNAME={RENDER_EXTERNAL_HOSTNAME}")

if not BOT_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    raise ValueError("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
if not ADMIN_TELEGRAM_ID:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_TELEGRAM_ID –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    raise ValueError("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_TELEGRAM_ID –Ω–µ –∑–∞–¥–∞–Ω–∞.")

try:
    ADMIN_TELEGRAM_ID = int(ADMIN_TELEGRAM_ID)
except ValueError:
    logger.error("ADMIN_TELEGRAM_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    raise ValueError("–û—à–∏–±–∫–∞: ADMIN_TELEGRAM_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram Application

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å Telegram API
async def check_telegram_api():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getMe") as response:
                data = await response.json()
                if data.get("ok"):
                    logger.info("–°–≤—è–∑—å —Å Telegram API –∞–∫—Ç–∏–≤–Ω–∞.")
                    return True, "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {data}")
                    return False, f"üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')})"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API: {e}")
        return False, f"üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({str(e)})"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect("warp_bot.db")
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            first_seen DATETIME,
            last_config_time TEXT,
            is_banned INTEGER DEFAULT 0
        )''')
        c.execute('''CREATE TABLE IF NOT EXISTS configs (
            config_id TEXT PRIMARY KEY,
            telegram_id INTEGER,
            created_at DATETIME,
            is_active INTEGER DEFAULT 1,
            FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
        )''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def generate_warp_config():
    private_key = f"CS/UQwV5cCjhGdH/1FQbSkRLvYU8Ha1xeTkHVg5rizI={uuid.uuid4().hex[:8]}"
    public_key = "bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo="
    config = f"""[Interface]
PrivateKey = {private_key}
S1 = 0
S2 = 0
Jc = 120
Jmin = 23
Jmax = 911
H1 = 1
H2 = 2
H3 = 3
H4 = 4
MTU = 1280
Address = 172.16.0.2, 2606:4700:110:8a82:ae4c:ce7e:e5a6:a7fd
DNS = 1.1.1.1, 2606:4700:4700::1111, 1.0.0.1, 2606:4700:4700::1001

[Peer]
PublicKey = {public_key}
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = 162.159.192.227:894
"""
    return config

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(telegram_id):
    return telegram_id == ADMIN_TELEGRAM_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats():
    try:
        conn = sqlite3.connect("warp_bot.db")
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE is_banned = 0")
        active_users = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
        banned_users = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM configs WHERE is_active = 1")
        active_configs = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM configs")
        total_configs = c.fetchone()[0]
        return active_users, banned_users, active_configs, total_configs
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return 0, 0, 0, 0
    finally:
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≤—Ä–µ–º–µ–Ω–∏
def get_activity_by_range(range_type):
    try:
        conn = sqlite3.connect("warp_bot.db")
        query = """
            SELECT strftime('%H', first_seen) as hour, COUNT(*) as activity_count
            FROM users
            WHERE first_seen >= ?
            GROUP BY hour
            ORDER BY hour
        """
        if range_type == "day":
            start_time = datetime.now() - timedelta(days=1)
        elif range_type == "week":
            start_time = datetime.now() - timedelta(days=7)
        elif range_type == "month":
            start_time = datetime.now() - timedelta(days=30)
        else:
            start_time = datetime.now() - timedelta(days=1)
        df = pd.read_sql_query(query, conn, params=(start_time,))
        return df
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
def generate_ascii_chart(range_type):
    df = get_activity_by_range(range_type)
    if df.empty:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({range_type}).")
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è 24 —á–∞—Å–æ–≤
    activity_counts = [0] * 24
    for _, row in df.iterrows():
        hour = int(row['hour'])
        activity_counts[hour] = row['activity_count']

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASCII-–≥—Ä–∞—Ñ–∏–∫
    chart = plot(activity_counts, {'height': 10, 'format': '{:8.0f}'})
    return f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({range_type}):\n{chart}"

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route('/')
async def stats_page():
    logger.info("–ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    active_users, banned_users, active_configs, total_configs = get_stats()
    ascii_chart_day = generate_ascii_chart("day")
    api_status_ok, api_status_message = await check_telegram_api()
    return render_template_string(
        """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WARP Bot Dashboard</title>
            <script src="https://cdn.tailwindcss.com"></script>
        </head>
        <body class="bg-gray-900 text-gray-100">
            <nav class="bg-gray-800 p-4 shadow">
                <div class="container mx-auto flex justify-between items-center">
                    <h1 class="text-2xl font-bold">WARP Bot Dashboard</h1>
                    <div>
                        <a href="/" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/activity/day" class="text-gray-300 hover:text-white px-3 py-2 rounded">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </nav>
            <div class="container mx-auto p-6">
                <h2 class="text-3xl font-semibold mb-6">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <div class="bg-gray-800 p-4 rounded-lg mb-6">
                    <p class="text-lg font-medium">
                        –°–≤—è–∑—å —Å Telegram API: 
                        <span class="{% if api_status_ok %}text-green-400{% else %}text-red-400{% endif %}">
                            {{ api_status_message }}
                        </span>
                    </p>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <div class="bg-gray-800 p-6 rounded-lg shadow hover:shadow-lg transition">
                        <h3 class="text-lg font-medium text-gray-300">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <p class="text-2xl font-bold text-blue-400">{{ active_users }}</p>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow hover:shadow-lg transition">
                        <h3 class="text-lg font-medium text-gray-300">–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <p class="text-2xl font-bold text-red-400">{{ banned_users }}</p>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow hover:shadow-lg transition">
                        <h3 class="text-lg font-medium text-gray-300">–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
                        <p class="text-2xl font-bold text-green-400">{{ active_configs }}</p>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow hover:shadow-lg transition">
                        <h3 class="text-lg font-medium text-gray-300">–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</h3>
                        <p class="text-2xl font-bold text-purple-400">{{ total_configs }}</p>
                    </div>
                </div>
                <h2 class="text-3xl font-semibold mb-6">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                <div class="bg-gray-800 p-6 rounded-lg shadow">
                    <h3 class="text-xl font-medium mb-4">–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)</h3>
                    <pre class="font-mono text-sm bg-gray-900 p-4 rounded">{{ ascii_chart_day }}</pre>
                    <div class="mt-4 flex space-x-4">
                        <a href="/activity/day" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """,
        active_users=active_users,
        banned_users=banned_users,
        active_configs=active_configs,
        total_configs=total_configs,
        ascii_chart_day=ascii_chart_day,
        api_status_ok=api_status_ok,
        api_status_message=api_status_message
    )

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@app.route('/activity/<range_type>')
async def activity_plot(range_type):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –≥—Ä–∞—Ñ–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({range_type})")
    if range_type not in ["day", "week", "month"]:
        return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏.", 400
    ascii_chart = generate_ascii_chart(range_type)
    api_status_ok, api_status_message = await check_telegram_api()
    return render_template_string(
        """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WARP Bot Activity</title>
            <script src="https://cdn.tailwindcss.com"></script>
        </head>
        <body class="bg-gray-900 text-gray-100">
            <nav class="bg-gray-800 p-4 shadow">
                <div class="container mx-auto flex justify-between items-center">
                    <h1 class="text-2xl font-bold">WARP Bot Dashboard</h1>
                    <div>
                        <a href="/" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/activity/day" class="text-gray-300 hover:text-white px-3 py-2 rounded">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="text-gray-300 hover:text-white px-3 py-2 rounded">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </nav>
            <div class="container mx-auto p-6">
                <h2 class="text-3xl font-semibold mb-6">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({{ range_type }})</h2>
                <div class="bg-gray-800 p-4 rounded-lg mb-6">
                    <p class="text-lg font-medium">
                        –°–≤—è–∑—å —Å Telegram API: 
                        <span class="{% if api_status_ok %}text-green-400{% else %}text-red-400{% endif %}">
                            {{ api_status_message }}
                        </span>
                    </p>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow">
                    <pre class="font-mono text-sm bg-gray-900 p-4 rounded">{{ ascii_chart }}</pre>
                    <div class="mt-4 flex space-x-4">
                        <a href="/activity/day" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">24 —á–∞—Å–∞</a>
                        <a href="/activity/week" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">–ù–µ–¥–µ–ª—è</a>
                        <a href="/activity/month" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">–ú–µ—Å—è—Ü</a>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """,
        range_type=range_type,
        ascii_chart=ascii_chart,
        api_status_ok=api_status_ok,
        api_status_message=api_status_message
    )

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook
@app.route('/webhook', methods=['POST'])
async def webhook():
    try:
        update = Update.de_json(request.get_json(), application.bot)
        await application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return '', 500

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard(is_admin_user=False):
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config"),
            InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
        ],
        [
            InlineKeyboardButton("XrayVPN", url="https://astracat2022.github.io/vpngen/generator"),
        ]
    ]
    if is_admin_user:
        keyboard.append([
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users"),
        ])
        keyboard.append([
            InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24—á)", callback_data="activity_day"),
            InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ–¥–µ–ª—è)", callback_data="activity_week"),
        ])
        keyboard.append([
            InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü)", callback_data="activity_month"),
        ])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute(
        "INSERT OR REPLACE INTO users (telegram_id, username, first_name, last_name, first_seen, last_config_time, is_banned) "
        "VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user.id, user.username, user.first_name, user.last_name, datetime.now(), None, 0)
    )
    conn.commit()
    conn.close()
    
    is_admin_user = is_admin(user.id)
    reply_markup = get_main_keyboard(is_admin_user)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n"
        f"–í–∞—à Telegram ID: {user.id}\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    is_admin_user = is_admin(user.id)
    reply_markup = get_main_keyboard(is_admin_user)
    
    await query.answer()
    
    if query.data == "get_config":
        await get_config(update, context)
    elif query.data == "help":
        help_text = (
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/getconfig - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WARP (.conf —Ñ–∞–π–ª)\n"
            "–î–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/ban <user_id> - –ó–∞–±–∞–Ω–∏—Ç—å\n"
            "/unban <user_id> - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
            "/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –†–∞—Å—Å—ã–ª–∫–∞\n"
            "/hourly_activity - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!"
        )
        await query.message.reply_text(help_text, reply_markup=reply_markup)
    elif query.data == "stats" and is_admin_user:
        await stats(update, context)
    elif query.data == "users" and is_admin_user:
        await users(update, context)
    elif query.data in ["activity_day", "activity_week", "activity_month"] and is_admin_user:
        range_type = {"activity_day": "day", "activity_week": "week", "activity_month": "month"}[query.data]
        ascii_chart = generate_ascii_chart(range_type)
        await query.message.reply_text(
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({range_type}):\n```\n{ascii_chart}\n```",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getconfig
async def get_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    c.execute("SELECT is_banned FROM users WHERE telegram_id = ?", (user.id,))
    result = c.fetchone()
    if result and result[0] == 1:
        await update.message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ª–∏–º–∏—Ç 1 –∫–æ–Ω—Ñ–∏–≥ –≤ 24 —á–∞—Å–∞)
    c.execute("SELECT last_config_time FROM users WHERE telegram_id = ?", (user.id,))
    last_config_time = c.fetchone()[0]
    if last_config_time:
        last_time = datetime.fromisoformat(last_config_time)
        if datetime.now() - last_time < timedelta(hours=24):
            await update.message.reply_text(
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            conn.close()
            return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = generate_warp_config()
    config_id = str(uuid.uuid4())
    c.execute(
        "INSERT INTO configs (config_id, telegram_id, created_at, is_active) VALUES (?, ?, ?, ?)",
        (config_id, user.id, datetime.now(), 1)
    )
    c.execute(
        "UPDATE users SET last_config_time = ? WHERE telegram_id = ?",
        (datetime.now().isoformat(), user.id)
    )
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = f"/tmp/config_{user.id}.conf"
    with open(config_path, "w") as f:
        f.write(config)
    try:
        with open(config_path, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename="warp.conf",
                caption="–í–∞—à–∞ WARP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                reply_markup=get_main_keyboard(is_admin(user.id))
            )
    finally:
        if os.path.exists(config_path):
            os.remove(config_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    active_users, banned_users, active_configs, total_configs = get_stats()
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {banned_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {active_configs}\n"
        f"–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {total_configs}"
    )
    await update.message.reply_text(stats_message, reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users
async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    c.execute("SELECT telegram_id, username, first_name, last_name, is_banned FROM users")
    users = c.fetchall()
    conn.close()
    
    users_message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if user[4] == 1 else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        users_message += (
            f"ID: {user[0]}\n"
            f"Username: {user[1] or 'N/A'}\n"
            f"–ò–º—è: {user[2]} {user[3] or ''}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    await update.message.reply_text(users_message, reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ Telegram ID: /ban <telegram_id>")
        return
    
    try:
        target_id = int(context.args[0])
        conn = sqlite3.connect("warp_bot.db")
        c = conn.cursor()
        c.execute("UPDATE users SET is_banned = 1 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=get_main_keyboard(is_admin=True))
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text="–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_id}: {e}")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ Telegram ID: /unban <telegram_id>")
        return
    
    try:
        target_id = int(context.args[0])
        conn = sqlite3.connect("warp_bot.db")
        c = conn.cursor()
        c.execute("UPDATE users SET is_banned = 0 WHERE telegram_id = ?", (target_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", reply_markup=get_main_keyboard(is_admin=True))
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text="–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_id}: {e}")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_main_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message = " ".join(context.args)
    conn = sqlite3.connect("warp_bot.db")
    c = conn.cursor()
    c.execute("SELECT telegram_id FROM users WHERE is_banned = 0")
    users = c.fetchall()
    conn.close()
    
    success_count = 0
    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=message)
            success_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user[0]}: {e}")
    
    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_main_keyboard(is_admin=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hourly_activity
async def hourly_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    ascii_chart = generate_ascii_chart("day")
    reply_markup = get_main_keyboard(is_admin=True)
    await update.message.reply_text(
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (24 —á–∞—Å–∞):\n```\n{ascii_chart}\n```",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
async def set_webhook():
    global application
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Application builder...")
    application = Application.builder().token(BOT_TOKEN).build()
    logger.info("Application builder —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("getconfig", get_config))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("users", users))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("unban", unban))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("hourly_activity", hourly_activity))
    application.add_error_handler(error_handler)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    webhook_url = f"https://{RENDER_EXTERNAL_HOSTNAME}/webhook"
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    max_retries = 3
    retry_delay = 5
    for attempt in range(max_retries):
        try:
            await application.bot.delete_webhook(drop_pending_updates=True)
            await application.bot.set_webhook(webhook_url)
            logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
            else:
                raise
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            raise

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram-–±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        asyncio.run(set_webhook())
        logger.info("Webhook-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        raise

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (gunicorn –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render)
    app.run(host='0.0.0.0', port=int(PORT))

if __name__ == "__main__":
    main()
